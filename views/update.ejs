<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Atualizar Status e Agente - Matrix DB</title>
    
    <link rel="icon" href="/imagens/MatrixImagens/MatrixPoster.jpg" type="image/jpg">

    <!-- Swiper -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css"/>
    <script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>

    <!-- jquery -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

    <!-- Bootstrap -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    
    <!-- Styles -->
    <link rel="stylesheet" href="/styles/reset.css">
    <link rel="stylesheet" href="/styles/style.css">
    <link rel="stylesheet" href="/styles/styleNav.css">
    <link rel="stylesheet" href="/styles/styleSwiperCarousel.css">
    <link rel="stylesheet" href="/styles/styleSwiperBootstrap.css">
    <title>Dashboard</title>
    

    <style>
      body {
        /* background: #eee; */
        /* background: rgb(232 232 237/70%); */
        /* background: #030305; */
        background-image: url('/imagens/MatrixImagens/neo-matrix-resurrection-back.jpg');
        background-size: cover;       /* Faz a imagem preencher a tela sem distorção */
        background-position: center;  /* Centraliza a imagem */
        background-repeat: no-repeat; /* Evita a repetição da imagem */
        /* background-color: rgba(63, 255, 20, 0.7); */
        /* background-color: #ddfced; */
        font-family: Helvetica Neue, Helvetica, Arial, sans-serif;
        font-size: 14px;
        color: #000000;
        margin: 0;
        padding: 0;
      }
    </style>
</head>
<body>
    
    <header class="header">
      <nav class="navbar fixed-top navbar-expand-lg ">
        <div class="container-fluid  gap-2">
          <button class="navbar-toggler navbar-toggler-custom order-1" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavAltMarkup" aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon" ></span>
          </button>
          <a class="navbar-brand order-2 mx-auto" href="/dashboard">
            <img src="/imagens/JLImagens/matrixLogo.png" class="logo" width="168" height="16" alt="LOGO - MATRIX">
          </a>
          
          <div class="navbar-brand order-4 dropdown">
            <a href="#" class="nav-link dropdown-toggle" id="avatarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
              <svg xmlns="http://www.w3.org/2000/svg" class="icon_menu-person" width="25" height="25" fill="currentColor" viewBox="0 0 16 16">
                <path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0z"/>
                <path fill-rule="evenodd" d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1z"/>
              </svg>
            </a>
            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="avatarDropdown">
              <li><a class="dropdown-item" id="color-picker" href="#"><a href="#"><%= user %></a></a></li>
              <li><hr class="dropdown-divider"></li>
              <li><a class="dropdown-item" id="color-picker" href="#"><a href="/logout">Logout</a></a></li>
              <!-- <li><hr class="dropdown-divider"></li> -->
              <li><a class="dropdown-item" id="color-picker" href="#"><a href="/signup">SignUp</a></a></li>
            </ul>
          </div>
          
          <!-- <a class="navbar-brand order-5 disabled" id="color-picker" href="#">
            <svg xmlns="http://w3.org/2000/svg" class="icon_menu-cart" width="22" height="22" fill="currentColor" class="bi bi-cart-fill" viewBox="0 0 16 16">
                <path d="M0 1.5A.5.5 0 0 1 .5 1H2a.5.5 0 0 1 .485.379L2.89 3H14.5a.5.5 0 0 1 .491.592l-1.5 8A.5.5 0 0 1 13 12H4a.5.5 0 0 1-.491-.408L2.01 3.607 1.61 2H.5a.5.5 0 0 1-.5-.5zM5 12a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm7 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm-7 1a1 1 0 1 1 0 2 1 1 0 0 1 0-2zm7 0a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
            </svg>
          </a> -->
          <div class="collapse navbar-collapse order-3" id="navbarNavAltMarkup">
            <div class="navbar-nav">
                <li class="nav-item">
                  <a class="nav-link" id="color-picker" href="/select">Select</a>
                </li>
                <li class="nav-item">
                  <a class="nav-link" id="color-picker" href="/insert">Insert</a>
                </li>
                <li class="nav-item">
                  <a class="nav-link active" id="color-picker" aria-current="page" href="/update">Update</a>
                </li>
                <li class="nav-item">
                  <a class="nav-link" id="color-picker" href="/delete">Delete</a>
                </li>
            </div>

          </div>
        </div>
      </nav>
    </header>
    <main>
     
       
   
      <br>
      <br>


      <div class="container mt-5">
        <h1>Atualizar Humano</h1>
        <form id="updateHumanoForm">
            <div class="mb-3">
                <label for="humanoId" class="form-label">ID do Humano (Obrigatório)</label>
                <input type="number" class="form-control" id="humanoId" required>
            </div>
            <div class="mb-3">
                <label for="nomeHumano" class="form-label">Nome (Opcional)</label>
                <input type="text" class="form-control" id="nomeHumano">
            </div>
            <div class="mb-3">
                <label for="humanoDataNasc" class="form-label">Data de Nascimento (Opcional)</label>
                <input type="date" class="form-control" id="humanoDataNasc">
            </div>
            <div class="mb-3">
                <label for="humanoStatus" class="form-label">Status (Opcional)</label>
                <input type="text" class="form-control" id="humanoStatus">
            </div>
            <div class="mb-3">
                <label for="humanoResistencia" class="form-label">Resistência (Opcional)</label>
                <input type="number" class="form-control" id="humanoResistencia">
            </div>
            <!-- Área Drag and Drop -->
            <div id="dropArea">
              <p>Arraste e Solte a Imagem Escolhida (Opcional)</p>
              <img src="/imagens/Icons/Upload.png" alt="Upload Icon" class="ImagemIconUpload">
            </div>
            
            <!-- Upload de Arquivo Normal -->
            <label for="imagem">Ou:</label>
            <input type="file" id="imagem" name="imagem" accept="image/*">
            
            <button type="submit" class="btn btn-primary">Atualizar Humano</button>
        </form>
    </div>
    
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const dropArea = document.getElementById('dropArea');
        const fileInput = document.getElementById('imagem');
        let uploadedFile;

        // Impede o comportamento padrão do navegador ao arrastar e soltar
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
          dropArea.addEventListener(eventName, preventDefaults, false);
        });

        function preventDefaults(e) {
          e.preventDefault();
          e.stopPropagation();
        }

        // Só para mudar a aparência ao arrastar o arquivo
        ['dragenter', 'dragover'].forEach(eventName => {
          dropArea.addEventListener(eventName, () => dropArea.classList.add('hover'), false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
          dropArea.addEventListener(eventName, () => dropArea.classList.remove('hover'), false);
        });

        // Após soltar a imagem na área
        dropArea.addEventListener('drop', (e) => {
          const files = e.dataTransfer.files;
          if (files.length) {
            uploadedFile = files[0];
            fileInput.files = files; // Para atualizar o campo de input com o arquivo para manter compatibilidade
          }
        });

        document.getElementById('updateHumanoForm').addEventListener('submit', async (event) => {
        event.preventDefault();

        const humanoId = document.getElementById('humanoId').value;
        const nomeHumano = document.getElementById('nomeHumano').value;
        const humanoDataNasc = document.getElementById('humanoDataNasc').value;
        const humanoStatus = document.getElementById('humanoStatus').value;
        const humanoResistencia = document.getElementById('humanoResistencia').value;

        // Criar um FormData para enviar os dados
        const formData = new FormData();
        formData.append('humanoId', humanoId); // ID do humano
        if (nomeHumano) formData.append('nomeHumano', nomeHumano);
        if (humanoDataNasc) formData.append('humanoDataNasc', humanoDataNasc);
        if (humanoStatus) formData.append('humanoStatus', humanoStatus);
        if (humanoResistencia) formData.append('humanoResistencia', humanoResistencia);

        // Adiciona o arquivo ao FormData se houver um upload via drag and drop ou input de arquivo
        if (uploadedFile) {
            formData.append('imagem', uploadedFile);
        } else if (fileInput.files.length > 0) {
            formData.append('imagem', fileInput.files[0]);
        }

        if (!formData.has('nomeHumano') && !formData.has('humanoDataNasc') && !formData.has('humanoStatus') && !formData.has('humanoResistencia') && !formData.has('imagem')) {
            alert('Nenhum campo para atualizar foi fornecido.');
            return;
        }


        try {
            const response = await fetch(`http://localhost:3000/updateHumano/${humanoId}`, {
                method: 'PUT',
                body: formData 
            });

            if (response.ok) {
                alert('Humano atualizado com sucesso!');
            } else {
                const errorText = await response.text();
                alert(`Erro ao atualizar humano: ${errorText}`);
            }
          } catch (error) {
            console.error('Erro ao atualizar humano:', error);
            alert('Ocorreu um erro ao atualizar o humano!');
          }
        });
      });
    </script>
    
      <br>
      <br>
      <br>

      <div class="container mt-5">
        <h1>Atualizar Status de Agentes e Movimentar Humanos</h1>
        <form id="updateForm">
            <div class="mb-3">
                <label for="idsAgentes" class="form-label">IDs dos Agentes (separados por vírgula)</label>
                <input type="text" class="form-control" id="idsAgentes" required placeholder="Ex: 1,2,3">
            </div>
            <div class="mb-3">
                <label for="novoStatus" class="form-label">Novo Status</label>
                <input type="text" class="form-control" id="novoStatus" required placeholder="Ex: Ativo, Desativado">
            </div>
            <button type="submit" class="btn btn-primary">Atualizar Status e Movimentar</button>
        </form>
    </div>

    <script>
        document.getElementById('updateForm').addEventListener('submit', async (event) => {
            event.preventDefault();

            const idsAgentes = document.getElementById('idsAgentes').value.split(',').map(Number);
            const novoStatus = document.getElementById('novoStatus').value;

            try {
                const response = await fetch(`http://localhost:3000/updateAgentesStatus`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        ids: idsAgentes,
                        status: novoStatus,
                    }),
                });

                if (response.ok) {
                    alert('Status dos agentes atualizado e humanos movimentados com sucesso!');
                } else {
                    const errorText = await response.text();
                    alert(`Erro ao atualizar status e movimentar humanos: ${errorText}`);
                }
            } catch (error) {
                console.error('Erro:', error);
                alert('Ocorreu um erro ao atualizar o status e movimentar os humanos!');
            }
        });
    </script>

    <div class="container mt-5">
      <h1>Atualizar AI</h1>
      <form id="updateAIForm">
          <div class="mb-3">
              <label for="idAI" class="form-label">ID da AI (Obrigatório)</label>
              <input type="number" class="form-control" id="idAI" required>
          </div>
          <div class="mb-3">
              <label for="versaoAI" class="form-label">Versão (Opcional)</label>
              <input type="text" class="form-control" id="versaoAI">
          </div>
          <div class="mb-3">
              <label for="nomeAI" class="form-label">Nome (Opcional)</label>
              <input type="text" class="form-control" id="nomeAI">
          </div>
          <div class="mb-3">
              <label for="propositoAI" class="form-label">Propósito (Opcional)</label>
              <input type="text" class="form-control" id="propositoAI">
          </div>
          <div class="mb-3">
              <label for="statusAI" class="form-label">Status (Opcional)</label>
              <input type="text" class="form-control" id="statusAI">
          </div>
          <button type="submit" class="btn btn-primary">Atualizar AI</button>
      </form>
    </div>

    <script>
      document.getElementById('updateAIForm').addEventListener('submit', async (event) => {
          event.preventDefault();

          const idAI = document.getElementById('idAI').value;
          const versaoAI = document.getElementById('versaoAI').value;
          const nomeAI = document.getElementById('nomeAI').value;
          const propositoAI = document.getElementById('propositoAI').value;
          const statusAI = document.getElementById('statusAI').value;

          const dataToSend = {
            versaoAI: versaoAI || null,
            nomeAI: nomeAI || null,
            propositoAI: propositoAI || null,
            statusAI: statusAI || null,
          };

          try {
            const response = await fetch(`http://localhost:3000/updateAI/${idAI}`, {
              method: 'PUT',
              headers: {
                  'Content-Type': 'application/json',
              },
              body: JSON.stringify(dataToSend),
            });
              if (response.ok) {
                  alert('AI atualizada com sucesso!');
              } else {
                  const errorText = await response.text();
                  alert(`Erro ao atualizar AI: ${errorText}`);
              }
          } catch (error) {
              console.error('Erro ao atualizar AI:', error);
              alert('Ocorreu um erro ao atualizar a AI!');
          }
      });
    </script>

    <div class="container mt-5">
      <h1>Atualizar Agente</h1>
      <form id="updateAgenteForm">
          <div class="mb-3">
              <label for="codigoAgente" class="form-label">Código Atual do Agente (Obrigatório)</label>
              <input type="number" class="form-control" id="codigoAgente" required>
          </div>
          <div class="mb-3">
              <label for="nivelAgente" class="form-label">Nível do Agente (Opcional)</label>
              <input type="number" class="form-control" id="nivelAgente">
          </div>
          <div class="mb-3">
              <label for="nivelAutonomia" class="form-label">Nível de Autonomia (Opcional)</label>
              <input type="number" class="form-control" id="nivelAutonomia">
          </div>
          <button type="submit" class="btn btn-primary">Atualizar Agente</button>
      </form>
    </div>

    <script>
      document.getElementById('updateAgenteForm').addEventListener('submit', async (event) => {
          event.preventDefault();

          const codigoAgente = document.getElementById('codigoAgente').value;
          const nivelAgente = document.getElementById('nivelAgente').value;
          const nivelAutonomia = document.getElementById('nivelAutonomia').value;

          const dataToSend = {
              nivelAgente: nivelAgente || null,
              nivelAutonomia: nivelAutonomia || null,
          };

          try {
              const response = await fetch(`http://localhost:3000/updateAgente/${codigoAgente}`, {
                  method: 'PUT',
                  headers: {
                      'Content-Type': 'application/json',
                  },
                  body: JSON.stringify(dataToSend),
              });

              if (response.ok) {
                  alert('Agente atualizado com sucesso!');
              } else {
                  const errorText = await response.text();
                  alert(`Erro ao atualizar agente: ${errorText}`);
              }
          } catch (error) {
              console.error('Erro ao atualizar agente:', error);
              alert('Ocorreu um erro ao atualizar o agente!');
          }
      });
    </script>

    <br>
    <br>
    <br>
    <br>
    <br>
    <br>
    <br>
    <br>
    <br>
    <br>
    <br>
    <br>
    <br>
    <br>
    <br>
    <br>
    <br>
    <br>
    <br>
    <br>
    <br>
    <br>






    





     

     

     


      
      
    </main>


    <script src="/scripts/CarouselSwiper.js"></script>
    <script src="/scripts/Swiper.js"></script>
    <script src="/scripts/ShoppingCart.js"></script>


    <!-- Bootstrap -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>

  </body>
</html>