require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const session = require('express-session');
const { Client } = require('pg');

const app = express();

// Superuser credentials to create and manage users
const superuserConfig = {
    user: process.env.DB_USER,
    host: process.env.DB_HOST,
    database: process.env.DB_NAME,
    password: process.env.DB_PASSWORD,
    port: process.env.DB_PORT,
};

// Middleware
app.set('view engine', 'ejs');
app.use(bodyParser.urlencoded({ extended: false }));
app.use(express.static('public'));
app.use(
    session({
        secret: 'your_secret_key',
        resave: false,
        saveUninitialized: false,
    })
);

// Function to create a new PostgreSQL user
async function createUser(username, password) {
    const client = new Client(superuserConfig);
    await client.connect();
    try {
        // Create the new PostgreSQL user with the given username and password
        await client.query(`CREATE USER ${username} WITH PASSWORD '${password}';`);
        console.log(`User ${username} created successfully.`);
    } catch (error) {
        console.error(`Error creating user ${username}:`, error.message);
        throw new Error("This account could not be created. Username may already be taken.");
    } finally {
        await client.end();
    }
}

// Route to render login page
app.get('/login', (req, res) => {
    res.render('login', { error: null });
});

// Handle login
app.post('/login', async (req, res) => {
    const { username, password } = req.body;

    // Try connecting as the specified PostgreSQL user
    const userConfig = {
        user: username,
        host: 'localhost',
        database: 'postgres',
        password: password,
        port: 5432,
    };

    const client = new Client(userConfig);
    try {
        await client.connect();
        req.session.userId = username; // Save username in session
        res.redirect('/dashboard');
    } catch (error) {
        console.error(`Login error for user ${username}:`, error.message);
        res.render('login', { error: 'Invalid username or password' });
    } finally {
        await client.end();
    }
});

// Route to render signup page
app.get('/signup', (req, res) => {
    res.render('signup', { error: null });
});

// Handle signup
app.post('/signup', async (req, res) => {
    const { username, password } = req.body;
    try {
        await createUser(username, password);
        res.redirect('/login');
    } catch (error) {
        res.render('signup', { error: error.message });
    }
});

// Dashboard route (requires login)
app.get('/dashboard', (req, res) => {
    if (!req.session.userId) return res.redirect('/login');
    res.render('dashboard', { user: req.session.userId });
});

// Logout route
app.get('/logout', (req, res) => {
    req.session.destroy(() => {
        res.redirect('/login');
    });
});

// Start the server
app.listen(3000, () => {
    console.log('Server running on http://localhost:3000');
});

